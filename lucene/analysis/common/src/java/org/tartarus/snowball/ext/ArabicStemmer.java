// Generated by Snowball 2.0.0 - https://snowballstem.org/

package org.tartarus.snowball.ext;

import org.tartarus.snowball.Among;

import org.tartarus.snowball.SnowballProgram;

/**
 * This class implements the stemming algorithm defined by a snowball script.
 * <p>
 * Generated by Snowball 2.0.0 - https://snowballstem.org/
 * </p>
 */
@SuppressWarnings("unused")
public class ArabicStemmer extends org.tartarus.snowball.SnowballProgram {

    private static final long serialVersionUID = 1L;

private final static Among a_0[] = {
    new Among("!", -1, 1),
    new Among("\"", -1, 1),
    new Among("%", -1, 1),
    new Among("*", -1, 1),
    new Among(",", -1, 1),
    new Among(".", -1, 1),
    new Among("/", -1, 1),
    new Among(":", -1, 1),
    new Among(";", -1, 1),
    new Among("?", -1, 1),
    new Among("\\", -1, 1),
    new Among("\u060C", -1, 1),
    new Among("\u061B", -1, 1),
    new Among("\u061F", -1, 1),
    new Among("\u0640", -1, 1),
    new Among("\u064B", -1, 1),
    new Among("\u064C", -1, 1),
    new Among("\u064D", -1, 1),
    new Among("\u064E", -1, 1),
    new Among("\u064F", -1, 1),
    new Among("\u0650", -1, 1),
    new Among("\u0651", -1, 1),
    new Among("\u0652", -1, 1),
    new Among("\u0660", -1, 2),
    new Among("\u0661", -1, 3),
    new Among("\u0662", -1, 4),
    new Among("\u0663", -1, 5),
    new Among("\u0664", -1, 6),
    new Among("\u0665", -1, 7),
    new Among("\u0666", -1, 8),
    new Among("\u0667", -1, 9),
    new Among("\u0668", -1, 10),
    new Among("\u0669", -1, 11),
    new Among("\u066A", -1, 1),
    new Among("\u066B", -1, 1),
    new Among("\u066C", -1, 1),
    new Among("\uFE80", -1, 12),
    new Among("\uFE81", -1, 16),
    new Among("\uFE82", -1, 16),
    new Among("\uFE83", -1, 13),
    new Among("\uFE84", -1, 13),
    new Among("\uFE85", -1, 17),
    new Among("\uFE86", -1, 17),
    new Among("\uFE87", -1, 14),
    new Among("\uFE88", -1, 14),
    new Among("\uFE89", -1, 15),
    new Among("\uFE8A", -1, 15),
    new Among("\uFE8B", -1, 15),
    new Among("\uFE8C", -1, 15),
    new Among("\uFE8D", -1, 18),
    new Among("\uFE8E", -1, 18),
    new Among("\uFE8F", -1, 19),
    new Among("\uFE90", -1, 19),
    new Among("\uFE91", -1, 19),
    new Among("\uFE92", -1, 19),
    new Among("\uFE93", -1, 20),
    new Among("\uFE94", -1, 20),
    new Among("\uFE95", -1, 21),
    new Among("\uFE96", -1, 21),
    new Among("\uFE97", -1, 21),
    new Among("\uFE98", -1, 21),
    new Among("\uFE99", -1, 22),
    new Among("\uFE9A", -1, 22),
    new Among("\uFE9B", -1, 22),
    new Among("\uFE9C", -1, 22),
    new Among("\uFE9D", -1, 23),
    new Among("\uFE9E", -1, 23),
    new Among("\uFE9F", -1, 23),
    new Among("\uFEA0", -1, 23),
    new Among("\uFEA1", -1, 24),
    new Among("\uFEA2", -1, 24),
    new Among("\uFEA3", -1, 24),
    new Among("\uFEA4", -1, 24),
    new Among("\uFEA5", -1, 25),
    new Among("\uFEA6", -1, 25),
    new Among("\uFEA7", -1, 25),
    new Among("\uFEA8", -1, 25),
    new Among("\uFEA9", -1, 26),
    new Among("\uFEAA", -1, 26),
    new Among("\uFEAB", -1, 27),
    new Among("\uFEAC", -1, 27),
    new Among("\uFEAD", -1, 28),
    new Among("\uFEAE", -1, 28),
    new Among("\uFEAF", -1, 29),
    new Among("\uFEB0", -1, 29),
    new Among("\uFEB1", -1, 30),
    new Among("\uFEB2", -1, 30),
    new Among("\uFEB3", -1, 30),
    new Among("\uFEB4", -1, 30),
    new Among("\uFEB5", -1, 31),
    new Among("\uFEB6", -1, 31),
    new Among("\uFEB7", -1, 31),
    new Among("\uFEB8", -1, 31),
    new Among("\uFEB9", -1, 32),
    new Among("\uFEBA", -1, 32),
    new Among("\uFEBB", -1, 32),
    new Among("\uFEBC", -1, 32),
    new Among("\uFEBD", -1, 33),
    new Among("\uFEBE", -1, 33),
    new Among("\uFEBF", -1, 33),
    new Among("\uFEC0", -1, 33),
    new Among("\uFEC1", -1, 34),
    new Among("\uFEC2", -1, 34),
    new Among("\uFEC3", -1, 34),
    new Among("\uFEC4", -1, 34),
    new Among("\uFEC5", -1, 35),
    new Among("\uFEC6", -1, 35),
    new Among("\uFEC7", -1, 35),
    new Among("\uFEC8", -1, 35),
    new Among("\uFEC9", -1, 36),
    new Among("\uFECA", -1, 36),
    new Among("\uFECB", -1, 36),
    new Among("\uFECC", -1, 36),
    new Among("\uFECD", -1, 37),
    new Among("\uFECE", -1, 37),
    new Among("\uFECF", -1, 37),
    new Among("\uFED0", -1, 37),
    new Among("\uFED1", -1, 38),
    new Among("\uFED2", -1, 38),
    new Among("\uFED3", -1, 38),
    new Among("\uFED4", -1, 38),
    new Among("\uFED5", -1, 39),
    new Among("\uFED6", -1, 39),
    new Among("\uFED7", -1, 39),
    new Among("\uFED8", -1, 39),
    new Among("\uFED9", -1, 40),
    new Among("\uFEDA", -1, 40),
    new Among("\uFEDB", -1, 40),
    new Among("\uFEDC", -1, 40),
    new Among("\uFEDD", -1, 41),
    new Among("\uFEDE", -1, 41),
    new Among("\uFEDF", -1, 41),
    new Among("\uFEE0", -1, 41),
    new Among("\uFEE1", -1, 42),
    new Among("\uFEE2", -1, 42),
    new Among("\uFEE3", -1, 42),
    new Among("\uFEE4", -1, 42),
    new Among("\uFEE5", -1, 43),
    new Among("\uFEE6", -1, 43),
    new Among("\uFEE7", -1, 43),
    new Among("\uFEE8", -1, 43),
    new Among("\uFEE9", -1, 44),
    new Among("\uFEEA", -1, 44),
    new Among("\uFEEB", -1, 44),
    new Among("\uFEEC", -1, 44),
    new Among("\uFEED", -1, 45),
    new Among("\uFEEE", -1, 45),
    new Among("\uFEEF", -1, 46),
    new Among("\uFEF0", -1, 46),
    new Among("\uFEF1", -1, 47),
    new Among("\uFEF2", -1, 47),
    new Among("\uFEF3", -1, 47),
    new Among("\uFEF4", -1, 47),
    new Among("\uFEF5", -1, 51),
    new Among("\uFEF6", -1, 51),
    new Among("\uFEF7", -1, 49),
    new Among("\uFEF8", -1, 49),
    new Among("\uFEF9", -1, 50),
    new Among("\uFEFA", -1, 50),
    new Among("\uFEFB", -1, 48),
    new Among("\uFEFC", -1, 48)
};

private final static Among a_1[] = {
    new Among("\u0622", -1, 1),
    new Among("\u0623", -1, 1),
    new Among("\u0624", -1, 1),
    new Among("\u0625", -1, 1),
    new Among("\u0626", -1, 1)
};

private final static Among a_2[] = {
    new Among("\u0622", -1, 1),
    new Among("\u0623", -1, 1),
    new Among("\u0624", -1, 2),
    new Among("\u0625", -1, 1),
    new Among("\u0626", -1, 3)
};

private final static Among a_3[] = {
    new Among("\u0627\u0644", -1, 2),
    new Among("\u0628\u0627\u0644", -1, 1),
    new Among("\u0643\u0627\u0644", -1, 1),
    new Among("\u0644\u0644", -1, 2)
};

private final static Among a_4[] = {
    new Among("\u0629", -1, 1),
    new Among("\u0627\u062A", -1, 2),
    new Among("\u062A\u0627\u0646", -1, 3),
    new Among("\u062A\u064A\u0646", -1, 3)
};

private final static Among a_5[] = {
    new Among("\u0627", -1, 1),
    new Among("\u062A", -1, 1),
    new Among("\u0646", -1, 1),
    new Among("\u064A", -1, 1)
};

private final static Among a_6[] = {
    new Among("\u0627\u0646", -1, 1),
    new Among("\u0645\u0646", -1, 1)
};

private final static Among a_7[] = {
    new Among("\u0627\u0633\u062A", -1, 1),
    new Among("\u0645\u0633\u062A", -1, 1)
};

private final static Among a_8[] = {
    new Among("\u0623\u0622", -1, 2),
    new Among("\u0623\u0623", -1, 1),
    new Among("\u0623\u0624", -1, 1),
    new Among("\u0623\u0625", -1, 4),
    new Among("\u0623\u0627", -1, 3)
};

private final static Among a_9[] = {
    new Among("\u0641\u0627\u0644", -1, 1),
    new Among("\u0648\u0627\u0644", -1, 1)
};

private final static Among a_10[] = {
    new Among("\u0641", -1, 1),
    new Among("\u0648", -1, 1)
};

private final static Among a_11[] = {
    new Among("\u0627\u0644", -1, 2),
    new Among("\u0628\u0627\u0644", -1, 1),
    new Among("\u0643\u0627\u0644", -1, 1),
    new Among("\u0644\u0644", -1, 2)
};

private final static Among a_12[] = {
    new Among("\u0628", -1, 1),
    new Among("\u0628\u0628", 0, 3),
    new Among("\u0643", -1, 2),
    new Among("\u0643\u0643", 2, 4),
    new Among("\u0644", -1, 2)
};

private final static Among a_13[] = {
    new Among("\u0633\u0623", -1, 4),
    new Among("\u0633\u062A", -1, 2),
    new Among("\u0633\u0646", -1, 3),
    new Among("\u0633\u064A", -1, 1)
};

private final static Among a_14[] = {
    new Among("\u062A\u0633\u062A", -1, 1),
    new Among("\u0646\u0633\u062A", -1, 1),
    new Among("\u064A\u0633\u062A", -1, 1)
};

private final static Among a_15[] = {
    new Among("\u0627", -1, 1)
};

private final static Among a_16[] = {
    new Among("\u0627\u0621", -1, 1),
    new Among("\u0627\u0646", -1, 1)
};

private final static Among a_17[] = {
    new Among("\u0643\u0645\u0627", -1, 3),
    new Among("\u0647\u0645\u0627", -1, 3),
    new Among("\u0646\u0627", -1, 2),
    new Among("\u0647\u0627", -1, 2),
    new Among("\u0643", -1, 1),
    new Among("\u0643\u0645", -1, 2),
    new Among("\u0647\u0645", -1, 2),
    new Among("\u0647\u0646", -1, 2),
    new Among("\u0647", -1, 1),
    new Among("\u064A", -1, 1)
};

private final static Among a_18[] = {
    new Among("\u0646", -1, 1)
};

private final static Among a_19[] = {
    new Among("\u0627", -1, 1),
    new Among("\u0648", -1, 1),
    new Among("\u064A", -1, 1)
};

private final static Among a_20[] = {
    new Among("\u0627\u062A", -1, 1)
};

private final static Among a_21[] = {
    new Among("\u062A", -1, 1)
};

private final static Among a_22[] = {
    new Among("\u0629", -1, 1),
    new Among("\u062A\u0627\u0646", -1, 2),
    new Among("\u062A\u064A\u0646", -1, 2)
};

private final static Among a_23[] = {
    new Among("\u064A", -1, 1)
};

private final static Among a_24[] = {
    new Among("\u0643\u0645\u0627", -1, 3),
    new Among("\u0647\u0645\u0627", -1, 3),
    new Among("\u0646\u0627", -1, 2),
    new Among("\u0647\u0627", -1, 2),
    new Among("\u0643", -1, 1),
    new Among("\u0643\u0645", -1, 2),
    new Among("\u0647\u0645", -1, 2),
    new Among("\u0643\u0646", -1, 2),
    new Among("\u0647\u0646", -1, 2),
    new Among("\u0647", -1, 1),
    new Among("\u0643\u0645\u0648", -1, 3),
    new Among("\u0646\u064A", -1, 2)
};

private final static Among a_25[] = {
    new Among("\u0627", -1, 1),
    new Among("\u062A\u0627", 0, 2),
    new Among("\u062A\u0645\u0627", 0, 4),
    new Among("\u0646\u0627", 0, 2),
    new Among("\u062A", -1, 1),
    new Among("\u0646", -1, 1),
    new Among("\u0627\u0646", 5, 3),
    new Among("\u062A\u0646", 5, 2),
    new Among("\u0648\u0646", 5, 3),
    new Among("\u064A\u0646", 5, 3),
    new Among("\u064A", -1, 1)
};

private final static Among a_26[] = {
    new Among("\u0648\u0627", -1, 1),
    new Among("\u062A\u0645", -1, 1)
};

private final static Among a_27[] = {
    new Among("\u0648", -1, 1),
    new Among("\u062A\u0645\u0648", 0, 2)
};

private final static Among a_28[] = {
    new Among("\u0649", -1, 1)
};

private static final char g_all_letters[] = {255, 255, 15, 252, 11 };

private static final char g_v[] = {1, 0, 0, 0, 10 };

private static final char g_g1[] = {9, 0, 0, 64, 8 };

private static final char g_g2[] = {9 };

private static final char g_g3[] = {9, 0, 0, 64 };

private static final char g_g4[] = {1, 0, 0, 0, 8 };

private boolean B_case9;
private boolean B_case8;
private boolean B_case7;
private boolean B_case6;
private boolean B_case5;
private boolean B_case4;
private boolean B_case3;
private boolean B_case2;
private boolean B_case1;
private boolean B_root_found;
private boolean B_v_found;
private boolean B_alef_found;
private boolean B_meem_found;
private boolean B_is_defined;
private boolean B_is_verb;
private boolean B_is_noun;
private java.lang.StringBuilder S_ch1 = new java.lang.StringBuilder();
private java.lang.StringBuilder S_ch = new java.lang.StringBuilder();
private java.lang.StringBuilder S_root_test4 = new java.lang.StringBuilder();
private java.lang.StringBuilder S_root_test3 = new java.lang.StringBuilder();
private java.lang.StringBuilder S_root_test2 = new java.lang.StringBuilder();
private java.lang.StringBuilder S_root_test1 = new java.lang.StringBuilder();
private java.lang.StringBuilder S_root_test = new java.lang.StringBuilder();
private java.lang.StringBuilder S_root = new java.lang.StringBuilder();
private java.lang.StringBuilder S_stemmed_word = new java.lang.StringBuilder();
private java.lang.StringBuilder S_lam1 = new java.lang.StringBuilder();
private java.lang.StringBuilder S_ain = new java.lang.StringBuilder();
private java.lang.StringBuilder S_fa = new java.lang.StringBuilder();
private int I_word_len;


private boolean r_Normalize_pre() {
    int among_var;
    for (int v_1 = current.length(); v_1 > 0; v_1--)
    {
        lab0: {
            int v_2 = cursor;
            lab1: {
                bra = cursor;
                among_var = find_among(a_0);
                if (among_var == 0)
                {
                    break lab1;
                }
                ket = cursor;
                switch (among_var) {
                    case 1:
                        slice_del();
                        break;
                    case 2:
                        slice_from("0");
                        break;
                    case 3:
                        slice_from("1");
                        break;
                    case 4:
                        slice_from("2");
                        break;
                    case 5:
                        slice_from("3");
                        break;
                    case 6:
                        slice_from("4");
                        break;
                    case 7:
                        slice_from("5");
                        break;
                    case 8:
                        slice_from("6");
                        break;
                    case 9:
                        slice_from("7");
                        break;
                    case 10:
                        slice_from("8");
                        break;
                    case 11:
                        slice_from("9");
                        break;
                    case 12:
                        slice_from("\u0621");
                        break;
                    case 13:
                        slice_from("\u0623");
                        break;
                    case 14:
                        slice_from("\u0625");
                        break;
                    case 15:
                        slice_from("\u0626");
                        break;
                    case 16:
                        slice_from("\u0622");
                        break;
                    case 17:
                        slice_from("\u0624");
                        break;
                    case 18:
                        slice_from("\u0627");
                        break;
                    case 19:
                        slice_from("\u0628");
                        break;
                    case 20:
                        slice_from("\u0629");
                        break;
                    case 21:
                        slice_from("\u062A");
                        break;
                    case 22:
                        slice_from("\u062B");
                        break;
                    case 23:
                        slice_from("\u062C");
                        break;
                    case 24:
                        slice_from("\u062D");
                        break;
                    case 25:
                        slice_from("\u062E");
                        break;
                    case 26:
                        slice_from("\u062F");
                        break;
                    case 27:
                        slice_from("\u0630");
                        break;
                    case 28:
                        slice_from("\u0631");
                        break;
                    case 29:
                        slice_from("\u0632");
                        break;
                    case 30:
                        slice_from("\u0633");
                        break;
                    case 31:
                        slice_from("\u0634");
                        break;
                    case 32:
                        slice_from("\u0635");
                        break;
                    case 33:
                        slice_from("\u0636");
                        break;
                    case 34:
                        slice_from("\u0637");
                        break;
                    case 35:
                        slice_from("\u0638");
                        break;
                    case 36:
                        slice_from("\u0639");
                        break;
                    case 37:
                        slice_from("\u063A");
                        break;
                    case 38:
                        slice_from("\u0641");
                        break;
                    case 39:
                        slice_from("\u0642");
                        break;
                    case 40:
                        slice_from("\u0643");
                        break;
                    case 41:
                        slice_from("\u0644");
                        break;
                    case 42:
                        slice_from("\u0645");
                        break;
                    case 43:
                        slice_from("\u0646");
                        break;
                    case 44:
                        slice_from("\u0647");
                        break;
                    case 45:
                        slice_from("\u0648");
                        break;
                    case 46:
                        slice_from("\u0649");
                        break;
                    case 47:
                        slice_from("\u064A");
                        break;
                    case 48:
                        slice_from("\u0644\u0627");
                        break;
                    case 49:
                        slice_from("\u0644\u0623");
                        break;
                    case 50:
                        slice_from("\u0644\u0625");
                        break;
                    case 51:
                        slice_from("\u0644\u0622");
                        break;
                }
                break lab0;
            }
            cursor = v_2;
            if (cursor >= limit)
            {
                return false;
            }
            cursor++;
        }
    }
    return true;
}

private boolean r_Normalize_post() {
    int among_var;
    int v_1 = cursor;
    lab0: {
        limit_backward = cursor;
        cursor = limit;
        ket = cursor;
        if (find_among_b(a_1) == 0)
        {
            break lab0;
        }
        bra = cursor;
        slice_from("\u0621");
        cursor = limit_backward;
    }
    cursor = v_1;
    int v_2 = cursor;
    lab1: {
        for (int v_3 = I_word_len; v_3 > 0; v_3--)
        {
            lab2: {
                int v_4 = cursor;
                lab3: {
                    bra = cursor;
                    among_var = find_among(a_2);
                    if (among_var == 0)
                    {
                        break lab3;
                    }
                    ket = cursor;
                    switch (among_var) {
                        case 1:
                            slice_from("\u0627");
                            break;
                        case 2:
                            slice_from("\u0648");
                            break;
                        case 3:
                            slice_from("\u064A");
                            break;
                    }
                    break lab2;
                }
                cursor = v_4;
                if (cursor >= limit)
                {
                    break lab1;
                }
                cursor++;
            }
        }
    }
    cursor = v_2;
    return true;
}

private boolean r_Checks1() {
    int among_var;
    I_word_len = current.length();
    bra = cursor;
    among_var = find_among(a_3);
    if (among_var == 0)
    {
        return false;
    }
    ket = cursor;
    switch (among_var) {
        case 1:
            if (!(I_word_len > 4))
            {
                return false;
            }
            B_is_noun = true;
            B_is_verb = false;
            B_is_defined = true;
            break;
        case 2:
            if (!(I_word_len > 3))
            {
                return false;
            }
            B_is_noun = true;
            B_is_verb = false;
            B_is_defined = true;
            break;
    }
    return true;
}

private boolean r_Checks2() {
    int among_var;
    I_word_len = current.length();
    ket = cursor;
    among_var = find_among_b(a_4);
    if (among_var == 0)
    {
        return false;
    }
    bra = cursor;
    switch (among_var) {
        case 1:
            if (!(I_word_len > 2))
            {
                return false;
            }
            B_is_noun = true;
            B_is_verb = false;
            break;
        case 2:
            if (!(I_word_len > 3))
            {
                return false;
            }
            B_is_noun = true;
            B_is_verb = false;
            break;
        case 3:
            if (!(I_word_len >= 5))
            {
                return false;
            }
            B_is_noun = true;
            B_is_verb = false;
            break;
    }
    return true;
}

private boolean r_Check_Pattern1() {
    assign_to(S_root_test);
    {

        SnowballProgram v_1 = new SnowballProgram(this);
        current = S_root_test;
        cursor = 0;
        limit = current.length();
        int v_2 = cursor;
        lab0: {
            bra = cursor;
            if (!(eq_s("\u0645")))
            {
                break lab0;
            }
            ket = cursor;
            B_meem_found = true;
        }
        cursor = v_2;
        int v_3 = cursor;
        lab1: {
            bra = cursor;
            if (cursor >= limit)
            {
                break lab1;
            }
            cursor++;
            ket = cursor;
            bra = cursor;
            if (!(eq_s("\u0627")))
            {
                break lab1;
            }
            ket = cursor;
            B_alef_found = true;
        }
        cursor = v_3;
        int v_4 = cursor;
        lab2: {
            {
                int c = cursor + 2;
                if (0 > c || c > limit)
                {
                    break lab2;
                }
                cursor = c;
            }
            bra = cursor;
            if (!(in_grouping(g_v, 1575, 1610)))
            {
                break lab2;
            }
            ket = cursor;
            B_v_found = true;
        }
        cursor = v_4;
        copy_from(v_1);
    }
    return true;
}

private boolean r_Pattern_Step1a() {
    {

        SnowballProgram v_1 = new SnowballProgram(this);
        current = S_fa;
        cursor = 0;
        limit = current.length();
        {
            int c = cursor;
            insert(cursor, limit, "\u0645");
            cursor = c;
        }
        copy_from(v_1);
    }
    {
        int c = cursor + 2;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_ain);
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_lam1);
    B_root_found = true;
    return true;
}

private boolean r_Pattern_Step1a1() {
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_fa);
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_ain);
    {
        int c = cursor + 1;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_lam1);
    B_root_found = true;
    return true;
}

private boolean r_Pattern_Step1a2() {
    {
        int c = cursor + 1;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_fa);
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_ain);
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_lam1);
    B_root_found = true;
    return true;
}

private boolean r_Pattern_Step1b() {
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_fa);
    {
        int c = cursor + 1;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_ain);
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_lam1);
    B_root_found = true;
    return true;
}

private boolean r_Pattern_Step1c() {
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_fa);
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_ain);
    {
        int c = cursor + 1;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(out_grouping(g_v, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_lam1);
    B_root_found = true;
    return true;
}

private boolean r_Pattern_Step1c1() {
    I_word_len = current.length();
    bra = cursor;
    if (find_among(a_5) == 0)
    {
        return false;
    }
    ket = cursor;
    if (!(I_word_len == 4))
    {
        return false;
    }
    slice_del();
    return true;
}

private boolean r_Checks_Pattern2() {
    assign_to(S_root_test);
    assign_to(S_root_test1);
    assign_to(S_root_test2);
    assign_to(S_root_test3);
    assign_to(S_root_test4);
    {

        SnowballProgram v_1 = new SnowballProgram(this);
        current = S_root_test;
        cursor = 0;
        limit = current.length();
        int v_2 = cursor;
        lab0: {
            bra = cursor;
            if (!(in_grouping(g_g1, 1575, 1610)))
            {
                break lab0;
            }
            ket = cursor;
            B_case1 = true;
        }
        cursor = v_2;
        int v_3 = cursor;
        lab1: {
            {
                int c = cursor + 2;
                if (0 > c || c > limit)
                {
                    break lab1;
                }
                cursor = c;
            }
            bra = cursor;
            if (!(in_grouping(g_g2, 1575, 1578)))
            {
                break lab1;
            }
            ket = cursor;
            B_case2 = true;
        }
        cursor = v_3;
        copy_from(v_1);
    }
    {

        SnowballProgram v_4 = new SnowballProgram(this);
        current = S_root_test1;
        cursor = 0;
        limit = current.length();
        int v_5 = cursor;
        lab2: {
            bra = cursor;
            if (!(in_grouping(g_g3, 1575, 1605)))
            {
                break lab2;
            }
            ket = cursor;
            B_case3 = true;
        }
        cursor = v_5;
        int v_6 = cursor;
        lab3: {
            {
                int c = cursor + 3;
                if (0 > c || c > limit)
                {
                    break lab3;
                }
                cursor = c;
            }
            bra = cursor;
            if (!(in_grouping(g_v, 1575, 1610)))
            {
                break lab3;
            }
            ket = cursor;
            B_case4 = true;
        }
        cursor = v_6;
        copy_from(v_4);
    }
    {

        SnowballProgram v_7 = new SnowballProgram(this);
        current = S_root_test2;
        cursor = 0;
        limit = current.length();
        int v_8 = cursor;
        lab4: {
            {
                int c = cursor + 2;
                if (0 > c || c > limit)
                {
                    break lab4;
                }
                cursor = c;
            }
            bra = cursor;
            if (!(eq_s("\u0627\u064A")))
            {
                break lab4;
            }
            ket = cursor;
            B_case5 = true;
        }
        cursor = v_8;
        copy_from(v_7);
    }
    {

        SnowballProgram v_9 = new SnowballProgram(this);
        current = S_root_test3;
        cursor = 0;
        limit = current.length();
        int v_10 = cursor;
        lab5: {
            {
                int c = cursor + 1;
                if (0 > c || c > limit)
                {
                    break lab5;
                }
                cursor = c;
            }
            bra = cursor;
            if (!(eq_s("\u0648\u0627")))
            {
                break lab5;
            }
            ket = cursor;
            B_case6 = true;
        }
        cursor = v_10;
        copy_from(v_9);
    }
    {

        SnowballProgram v_11 = new SnowballProgram(this);
        current = S_root_test4;
        cursor = 0;
        limit = current.length();
        int v_12 = cursor;
        lab6: {
            {
                int c = cursor + 1;
                if (0 > c || c > limit)
                {
                    break lab6;
                }
                cursor = c;
            }
            bra = cursor;
            if (!(eq_s("\u0627")))
            {
                break lab6;
            }
            ket = cursor;
            {
                int c = cursor + 1;
                if (0 > c || c > limit)
                {
                    break lab6;
                }
                cursor = c;
            }
            bra = cursor;
            if (!(eq_s("\u0648")))
            {
                break lab6;
            }
            ket = cursor;
            B_case7 = true;
        }
        cursor = v_12;
        copy_from(v_11);
    }
    return true;
}

private boolean r_Pattern_Step2a() {
    {
        int c = cursor + 1;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_fa);
    {
        int c = cursor + 1;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_ain);
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_lam1);
    B_root_found = true;
    return true;
}

private boolean r_Pattern_Step2a1() {
    {
        int c = cursor + 1;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_fa);
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_ain);
    {
        int c = cursor + 1;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_lam1);
    B_root_found = true;
    return true;
}

private boolean r_Pattern_Step2b() {
    I_word_len = current.length();
    bra = cursor;
    if (find_among(a_6) == 0)
    {
        return false;
    }
    ket = cursor;
    if (!(I_word_len == 5))
    {
        return false;
    }
    slice_del();
    return true;
}

private boolean r_Pattern_Step2c() {
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_fa);
    {
        int c = cursor + 1;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_ain);
    {
        int c = cursor + 1;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_lam1);
    B_root_found = true;
    return true;
}

private boolean r_Pattern_Step2c2() {
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_fa);
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_ain);
    {
        int c = cursor + 2;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_lam1);
    B_root_found = true;
    return true;
}

private boolean r_Pattern_Step2c4() {
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_fa);
    {
        int c = cursor + 2;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_ain);
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_lam1);
    B_root_found = true;
    return true;
}

private boolean r_Pattern_Checks3() {
    assign_to(S_root_test);
    assign_to(S_root_test1);
    {

        SnowballProgram v_1 = new SnowballProgram(this);
        current = S_root_test;
        cursor = 0;
        limit = current.length();
        int v_2 = cursor;
        lab0: {
            bra = cursor;
            if (!(in_grouping(g_g2, 1575, 1578)))
            {
                break lab0;
            }
            ket = cursor;
            {
                int c = cursor + 1;
                if (0 > c || c > limit)
                {
                    break lab0;
                }
                cursor = c;
            }
            bra = cursor;
            if (!(in_grouping(g_g2, 1575, 1578)))
            {
                break lab0;
            }
            ket = cursor;
            {
                int c = cursor + 1;
                if (0 > c || c > limit)
                {
                    break lab0;
                }
                cursor = c;
            }
            bra = cursor;
            if (!(in_grouping(g_g4, 1575, 1610)))
            {
                break lab0;
            }
            ket = cursor;
            B_case8 = true;
        }
        cursor = v_2;
        copy_from(v_1);
    }
    {

        SnowballProgram v_3 = new SnowballProgram(this);
        current = S_root_test1;
        cursor = 0;
        limit = current.length();
        int v_4 = cursor;
        lab1: {
            {
                int c = cursor + 2;
                if (0 > c || c > limit)
                {
                    break lab1;
                }
                cursor = c;
            }
            bra = cursor;
            if (!(in_grouping(g_all_letters, 1575, 1610)))
            {
                break lab1;
            }
            ket = cursor;
            slice_to(S_ch);
            {
                int c = cursor + 1;
                if (0 > c || c > limit)
                {
                    break lab1;
                }
                cursor = c;
            }
            bra = cursor;
            if (!(in_grouping(g_all_letters, 1575, 1610)))
            {
                break lab1;
            }
            ket = cursor;
            slice_to(S_ch1);
            {

                SnowballProgram v_5 = new SnowballProgram(this);
                current = S_ch;
                cursor = 0;
                limit = current.length();
                if (!(eq_s(S_ch1)))
                {
                    copy_from(v_5);
                    break lab1;
                }
                copy_from(v_5);
            }
            B_case9 = true;
        }
        cursor = v_4;
        copy_from(v_3);
    }
    return true;
}

private boolean r_Pattern_Step3a() {
    I_word_len = current.length();
    bra = cursor;
    if (find_among(a_7) == 0)
    {
        return false;
    }
    ket = cursor;
    if (!(I_word_len == 6))
    {
        return false;
    }
    slice_del();
    return true;
}

private boolean r_Pattern_Step3b() {
    {
        int c = cursor + 1;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_fa);
    {
        int c = cursor + 1;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_ain);
    {
        int c = cursor + 1;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_lam1);
    B_root_found = true;
    return true;
}

private boolean r_Pattern_Step3c() {
    {
        int c = cursor + 1;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_fa);
    {
        int c = cursor + 2;
        if (0 > c || c > limit)
        {
            return false;
        }
        cursor = c;
    }
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_ain);
    bra = cursor;
    if (!(in_grouping(g_all_letters, 1575, 1610)))
    {
        return false;
    }
    ket = cursor;
    slice_to(S_lam1);
    B_root_found = true;
    return true;
}

private boolean r_Prefix_Step1() {
    int among_var;
    I_word_len = current.length();
    bra = cursor;
    among_var = find_among(a_8);
    if (among_var == 0)
    {
        return false;
    }
    ket = cursor;
    switch (among_var) {
        case 1:
            if (!(I_word_len > 3))
            {
                return false;
            }
            slice_from("\u0623");
            break;
        case 2:
            if (!(I_word_len > 3))
            {
                return false;
            }
            slice_from("\u0622");
            break;
        case 3:
            if (!(I_word_len > 3))
            {
                return false;
            }
            slice_from("\u0627");
            break;
        case 4:
            if (!(I_word_len > 3))
            {
                return false;
            }
            slice_from("\u0625");
            break;
    }
    return true;
}

private boolean r_Prefix_Step2a() {
    I_word_len = current.length();
    bra = cursor;
    if (find_among(a_9) == 0)
    {
        return false;
    }
    ket = cursor;
    if (!(I_word_len > 5))
    {
        return false;
    }
    slice_del();
    return true;
}

private boolean r_Prefix_Step2b() {
    I_word_len = current.length();
    {
        int v_1 = cursor;
        lab0: {
            if (!(eq_s("\u0641\u0627")))
            {
                break lab0;
            }
            return false;
        }
        cursor = v_1;
    }
    {
        int v_2 = cursor;
        lab1: {
            if (!(eq_s("\u0648\u0627")))
            {
                break lab1;
            }
            return false;
        }
        cursor = v_2;
    }
    bra = cursor;
    if (find_among(a_10) == 0)
    {
        return false;
    }
    ket = cursor;
    if (!(I_word_len > 3))
    {
        return false;
    }
    slice_del();
    return true;
}

private boolean r_Prefix_Step3a_Noun() {
    int among_var;
    I_word_len = current.length();
    bra = cursor;
    among_var = find_among(a_11);
    if (among_var == 0)
    {
        return false;
    }
    ket = cursor;
    switch (among_var) {
        case 1:
            if (!(I_word_len > 5))
            {
                return false;
            }
            slice_del();
            break;
        case 2:
            if (!(I_word_len > 4))
            {
                return false;
            }
            slice_del();
            break;
    }
    return true;
}

private boolean r_Prefix_Step3b_Noun() {
    int among_var;
    I_word_len = current.length();
    {
        int v_1 = cursor;
        lab0: {
            if (!(eq_s("\u0628\u0627")))
            {
                break lab0;
            }
            return false;
        }
        cursor = v_1;
    }
    bra = cursor;
    among_var = find_among(a_12);
    if (among_var == 0)
    {
        return false;
    }
    ket = cursor;
    switch (among_var) {
        case 1:
            if (!(I_word_len > 3))
            {
                return false;
            }
            slice_del();
            break;
        case 2:
            if (!(I_word_len > 4))
            {
                return false;
            }
            slice_del();
            break;
        case 3:
            if (!(I_word_len > 3))
            {
                return false;
            }
            slice_from("\u0628");
            break;
        case 4:
            if (!(I_word_len > 3))
            {
                return false;
            }
            slice_from("\u0643");
            break;
    }
    return true;
}

private boolean r_Prefix_Step3_Verb() {
    int among_var;
    I_word_len = current.length();
    bra = cursor;
    among_var = find_among(a_13);
    if (among_var == 0)
    {
        return false;
    }
    ket = cursor;
    switch (among_var) {
        case 1:
            if (!(I_word_len > 4))
            {
                return false;
            }
            slice_from("\u064A");
            break;
        case 2:
            if (!(I_word_len > 4))
            {
                return false;
            }
            slice_from("\u062A");
            break;
        case 3:
            if (!(I_word_len > 4))
            {
                return false;
            }
            slice_from("\u0646");
            break;
        case 4:
            if (!(I_word_len > 4))
            {
                return false;
            }
            slice_from("\u0623");
            break;
    }
    return true;
}

private boolean r_Prefix_Step4_Verb() {
    I_word_len = current.length();
    bra = cursor;
    if (find_among(a_14) == 0)
    {
        return false;
    }
    ket = cursor;
    if (!(I_word_len > 4))
    {
        return false;
    }
    B_is_verb = true;
    B_is_noun = false;
    slice_from("\u0627\u0633\u062A");
    return true;
}

private boolean r_Prefix_Step5_Verb() {
    I_word_len = current.length();
    bra = cursor;
    if (find_among(a_15) == 0)
    {
        return false;
    }
    ket = cursor;
    if (!(I_word_len == 6))
    {
        return false;
    }
    slice_del();
    return true;
}

private boolean r_Pattern_Step2c1() {
    I_word_len = current.length();
    ket = cursor;
    if (find_among_b(a_16) == 0)
    {
        return false;
    }
    bra = cursor;
    if (!(I_word_len == 5))
    {
        return false;
    }
    slice_del();
    return true;
}

private boolean r_Suffix_Noun_Step1a() {
    int among_var;
    I_word_len = current.length();
    ket = cursor;
    among_var = find_among_b(a_17);
    if (among_var == 0)
    {
        return false;
    }
    bra = cursor;
    switch (among_var) {
        case 1:
            if (!(I_word_len >= 4))
            {
                return false;
            }
            slice_del();
            break;
        case 2:
            if (!(I_word_len >= 5))
            {
                return false;
            }
            slice_del();
            break;
        case 3:
            if (!(I_word_len >= 6))
            {
                return false;
            }
            slice_del();
            break;
    }
    return true;
}

private boolean r_Suffix_Noun_Step1b() {
    I_word_len = current.length();
    ket = cursor;
    if (find_among_b(a_18) == 0)
    {
        return false;
    }
    bra = cursor;
    if (!(I_word_len > 5))
    {
        return false;
    }
    slice_del();
    return true;
}

private boolean r_Suffix_Noun_Step2a() {
    I_word_len = current.length();
    ket = cursor;
    if (find_among_b(a_19) == 0)
    {
        return false;
    }
    bra = cursor;
    if (!(I_word_len > 4))
    {
        return false;
    }
    slice_del();
    return true;
}

private boolean r_Suffix_Noun_Step2b() {
    I_word_len = current.length();
    ket = cursor;
    if (find_among_b(a_20) == 0)
    {
        return false;
    }
    bra = cursor;
    if (!(I_word_len >= 5))
    {
        return false;
    }
    slice_del();
    return true;
}

private boolean r_Suffix_Noun_Step2c1() {
    I_word_len = current.length();
    ket = cursor;
    if (find_among_b(a_21) == 0)
    {
        return false;
    }
    bra = cursor;
    if (!(I_word_len >= 4))
    {
        return false;
    }
    slice_del();
    return true;
}

private boolean r_Suffix_Noun_Step2c2() {
    int among_var;
    I_word_len = current.length();
    ket = cursor;
    among_var = find_among_b(a_22);
    if (among_var == 0)
    {
        return false;
    }
    bra = cursor;
    switch (among_var) {
        case 1:
            if (!(I_word_len >= 3))
            {
                return false;
            }
            slice_del();
            break;
        case 2:
            if (!(I_word_len >= 5))
            {
                return false;
            }
            slice_del();
            break;
    }
    return true;
}

private boolean r_Suffix_Noun_Step3() {
    I_word_len = current.length();
    ket = cursor;
    if (find_among_b(a_23) == 0)
    {
        return false;
    }
    bra = cursor;
    if (!(I_word_len >= 3))
    {
        return false;
    }
    slice_del();
    return true;
}

private boolean r_Suffix_Verb_Step1() {
    int among_var;
    I_word_len = current.length();
    ket = cursor;
    among_var = find_among_b(a_24);
    if (among_var == 0)
    {
        return false;
    }
    bra = cursor;
    switch (among_var) {
        case 1:
            if (!(I_word_len >= 4))
            {
                return false;
            }
            slice_del();
            break;
        case 2:
            if (!(I_word_len >= 5))
            {
                return false;
            }
            slice_del();
            break;
        case 3:
            if (!(I_word_len >= 6))
            {
                return false;
            }
            slice_del();
            break;
    }
    return true;
}

private boolean r_Suffix_Verb_Step2a() {
    int among_var;
    I_word_len = current.length();
    ket = cursor;
    among_var = find_among_b(a_25);
    if (among_var == 0)
    {
        return false;
    }
    bra = cursor;
    switch (among_var) {
        case 1:
            if (!(I_word_len >= 4))
            {
                return false;
            }
            slice_del();
            break;
        case 2:
            if (!(I_word_len >= 5))
            {
                return false;
            }
            slice_del();
            break;
        case 3:
            if (!(I_word_len > 5))
            {
                return false;
            }
            slice_del();
            break;
        case 4:
            if (!(I_word_len >= 6))
            {
                return false;
            }
            slice_del();
            break;
    }
    return true;
}

private boolean r_Suffix_Verb_Step2b() {
    I_word_len = current.length();
    ket = cursor;
    if (find_among_b(a_26) == 0)
    {
        return false;
    }
    bra = cursor;
    if (!(I_word_len >= 5))
    {
        return false;
    }
    slice_del();
    return true;
}

private boolean r_Suffix_Verb_Step2c() {
    int among_var;
    I_word_len = current.length();
    ket = cursor;
    among_var = find_among_b(a_27);
    if (among_var == 0)
    {
        return false;
    }
    bra = cursor;
    switch (among_var) {
        case 1:
            if (!(I_word_len >= 4))
            {
                return false;
            }
            slice_del();
            break;
        case 2:
            if (!(I_word_len >= 6))
            {
                return false;
            }
            slice_del();
            break;
    }
    return true;
}

private boolean r_Suffix_All_alef_maqsura() {
    I_word_len = current.length();
    ket = cursor;
    if (find_among_b(a_28) == 0)
    {
        return false;
    }
    bra = cursor;
    slice_from("\u064A");
    return true;
}

public boolean stem() {
    B_is_noun = true;
    B_is_verb = true;
    B_is_defined = false;
    int v_1 = cursor;
    r_Checks1();
    cursor = v_1;
    limit_backward = cursor;
    cursor = limit;
    int v_2 = limit - cursor;
    r_Checks2();
    cursor = limit - v_2;
    cursor = limit_backward;
    int v_3 = cursor;
    r_Normalize_pre();
    cursor = v_3;
    limit_backward = cursor;
    cursor = limit;
    int v_4 = limit - cursor;
    lab0: {
        lab1: {
            int v_5 = limit - cursor;
            lab2: {
                if (!(B_is_verb))
                {
                    break lab2;
                }
                lab3: {
                    int v_6 = limit - cursor;
                    lab4: {
                        {
                            int v_7 = 1;
                            while(true)
                            {
                                int v_8 = limit - cursor;
                                lab5: {
                                    if (!r_Suffix_Verb_Step1())
                                    {
                                        break lab5;
                                    }
                                    v_7--;
                                    continue;
                                }
                                cursor = limit - v_8;
                                break;
                            }
                            if (v_7 > 0)
                            {
                                break lab4;
                            }
                        }
                        lab6: {
                            int v_9 = limit - cursor;
                            lab7: {
                                if (!r_Suffix_Verb_Step2a())
                                {
                                    break lab7;
                                }
                                break lab6;
                            }
                            cursor = limit - v_9;
                            lab8: {
                                if (!r_Suffix_Verb_Step2c())
                                {
                                    break lab8;
                                }
                                break lab6;
                            }
                            cursor = limit - v_9;
                            if (cursor <= limit_backward)
                            {
                                break lab4;
                            }
                            cursor--;
                        }
                        break lab3;
                    }
                    cursor = limit - v_6;
                    lab9: {
                        if (!r_Suffix_Verb_Step2b())
                        {
                            break lab9;
                        }
                        break lab3;
                    }
                    cursor = limit - v_6;
                    if (!r_Suffix_Verb_Step2a())
                    {
                        break lab2;
                    }
                }
                break lab1;
            }
            cursor = limit - v_5;
            lab10: {
                if (!(B_is_noun))
                {
                    break lab10;
                }
                int v_10 = limit - cursor;
                lab11: {
                    lab12: {
                        int v_11 = limit - cursor;
                        lab13: {
                            if (!r_Suffix_Noun_Step2c2())
                            {
                                break lab13;
                            }
                            break lab12;
                        }
                        cursor = limit - v_11;
                        lab14: {
                            lab15: {
                                if (!(B_is_defined))
                                {
                                    break lab15;
                                }
                                break lab14;
                            }
                            if (!r_Suffix_Noun_Step1a())
                            {
                                break lab14;
                            }
                            lab16: {
                                int v_13 = limit - cursor;
                                lab17: {
                                    if (!r_Suffix_Noun_Step2a())
                                    {
                                        break lab17;
                                    }
                                    break lab16;
                                }
                                cursor = limit - v_13;
                                lab18: {
                                    if (!r_Suffix_Noun_Step2b())
                                    {
                                        break lab18;
                                    }
                                    break lab16;
                                }
                                cursor = limit - v_13;
                                lab19: {
                                    if (!r_Suffix_Noun_Step2c1())
                                    {
                                        break lab19;
                                    }
                                    break lab16;
                                }
                                cursor = limit - v_13;
                                if (cursor <= limit_backward)
                                {
                                    break lab14;
                                }
                                cursor--;
                            }
                            break lab12;
                        }
                        cursor = limit - v_11;
                        lab20: {
                            if (!r_Suffix_Noun_Step1b())
                            {
                                break lab20;
                            }
                            lab21: {
                                int v_14 = limit - cursor;
                                lab22: {
                                    if (!r_Suffix_Noun_Step2a())
                                    {
                                        break lab22;
                                    }
                                    break lab21;
                                }
                                cursor = limit - v_14;
                                lab23: {
                                    if (!r_Suffix_Noun_Step2b())
                                    {
                                        break lab23;
                                    }
                                    break lab21;
                                }
                                cursor = limit - v_14;
                                if (!r_Suffix_Noun_Step2c1())
                                {
                                    break lab20;
                                }
                            }
                            break lab12;
                        }
                        cursor = limit - v_11;
                        lab24: {
                            lab25: {
                                if (!(B_is_defined))
                                {
                                    break lab25;
                                }
                                break lab24;
                            }
                            if (!r_Suffix_Noun_Step2a())
                            {
                                break lab24;
                            }
                            break lab12;
                        }
                        cursor = limit - v_11;
                        if (!r_Suffix_Noun_Step2b())
                        {
                            cursor = limit - v_10;
                            break lab11;
                        }
                    }
                }
                if (!r_Suffix_Noun_Step3())
                {
                    break lab10;
                }
                break lab1;
            }
            cursor = limit - v_5;
            if (!r_Suffix_All_alef_maqsura())
            {
                break lab0;
            }
        }
    }
    cursor = limit - v_4;
    cursor = limit_backward;
    int v_16 = cursor;
    lab26: {
        int v_17 = cursor;
        lab27: {
            if (!r_Prefix_Step1())
            {
                cursor = v_17;
                break lab27;
            }
        }
        int v_18 = cursor;
        lab28: {
            lab29: {
                int v_19 = cursor;
                lab30: {
                    if (!r_Prefix_Step2a())
                    {
                        break lab30;
                    }
                    break lab29;
                }
                cursor = v_19;
                if (!r_Prefix_Step2b())
                {
                    cursor = v_18;
                    break lab28;
                }
            }
        }
        lab31: {
            int v_20 = cursor;
            lab32: {
                if (!r_Prefix_Step3a_Noun())
                {
                    break lab32;
                }
                break lab31;
            }
            cursor = v_20;
            lab33: {
                if (!(B_is_noun))
                {
                    break lab33;
                }
                if (!r_Prefix_Step3b_Noun())
                {
                    break lab33;
                }
                break lab31;
            }
            cursor = v_20;
            if (!(B_is_verb))
            {
                break lab26;
            }
            int v_21 = cursor;
            lab34: {
                if (!r_Prefix_Step3_Verb())
                {
                    cursor = v_21;
                    break lab34;
                }
            }
            if (!r_Prefix_Step4_Verb())
            {
                break lab26;
            }
        }
    }
    cursor = v_16;
    r_Normalize_post();
    assign_to(S_root);
    {

        SnowballProgram v_23 = new SnowballProgram(this);
        current = S_root;
        cursor = 0;
        limit = current.length();
        int v_24 = cursor;
        lab35: {
            lab36: {
                int v_25 = cursor;
                lab37: {
                    if (!r_Pattern_Step1c1())
                    {
                        break lab37;
                    }
                    break lab36;
                }
                cursor = v_25;
                lab38: {
                    if (!r_Pattern_Step2b())
                    {
                        break lab38;
                    }
                    break lab36;
                }
                cursor = v_25;
                if (!r_Pattern_Step3a())
                {
                    break lab35;
                }
            }
        }
        cursor = v_24;
        copy_from(v_23);
    }
    {

        SnowballProgram v_26 = new SnowballProgram(this);
        current = S_root;
        cursor = 0;
        limit = current.length();
        limit_backward = cursor;
        cursor = limit;
        int v_27 = limit - cursor;
        r_Pattern_Step2c1();
        cursor = limit - v_27;
        cursor = limit_backward;
        copy_from(v_26);
    }
    {

        SnowballProgram v_28 = new SnowballProgram(this);
        current = S_stemmed_word;
        cursor = 0;
        limit = current.length();
        {
            int c = cursor;
            insert(cursor, limit, S_root);
            cursor = c;
        }
        copy_from(v_28);
    }
    {

        SnowballProgram v_29 = new SnowballProgram(this);
        current = S_stemmed_word;
        cursor = 0;
        limit = current.length();
        int v_30 = cursor;
        lab39: {
            I_word_len = current.length();
            B_meem_found = false;
            B_alef_found = false;
            B_v_found = false;
            B_case1 = false;
            B_case2 = false;
            B_case3 = false;
            B_case4 = false;
            B_case5 = false;
            B_case6 = false;
            B_case7 = false;
            B_case8 = false;
            B_case9 = false;
            B_root_found = false;
            {

                SnowballProgram v_31 = new SnowballProgram(this);
                current = S_fa;
                cursor = 0;
                limit = current.length();
                {
                    int c = cursor;
                    insert(cursor, limit, "");
                    cursor = c;
                }
                copy_from(v_31);
            }
            {

                SnowballProgram v_32 = new SnowballProgram(this);
                current = S_ain;
                cursor = 0;
                limit = current.length();
                {
                    int c = cursor;
                    insert(cursor, limit, "");
                    cursor = c;
                }
                copy_from(v_32);
            }
            {

                SnowballProgram v_33 = new SnowballProgram(this);
                current = S_lam1;
                cursor = 0;
                limit = current.length();
                {
                    int c = cursor;
                    insert(cursor, limit, "");
                    cursor = c;
                }
                copy_from(v_33);
            }
            lab40: {
                lab41: {
                    if (!(I_word_len == 4))
                    {
                        break lab41;
                    }
                    int v_35 = cursor;
                    r_Check_Pattern1();
                    cursor = v_35;
                    int v_36 = cursor;
                    lab42: {
                        lab43: {
                            int v_37 = cursor;
                            lab44: {
                                if (!(B_meem_found))
                                {
                                    break lab44;
                                }
                                lab45: {
                                    int v_38 = cursor;
                                    lab46: {
                                        if (!(B_alef_found))
                                        {
                                            break lab46;
                                        }
                                        if (!r_Pattern_Step1a())
                                        {
                                            break lab46;
                                        }
                                        break lab45;
                                    }
                                    cursor = v_38;
                                    lab47: {
                                        if (!(B_alef_found))
                                        {
                                            break lab47;
                                        }
                                        break lab44;
                                    }
                                    lab48: {
                                        int v_40 = cursor;
                                        lab49: {
                                            if (!(B_v_found))
                                            {
                                                break lab49;
                                            }
                                            if (!r_Pattern_Step1a1())
                                            {
                                                break lab49;
                                            }
                                            break lab48;
                                        }
                                        cursor = v_40;
                                        lab50: {
                                            if (!(B_v_found))
                                            {
                                                break lab50;
                                            }
                                            break lab44;
                                        }
                                        if (!r_Pattern_Step1a2())
                                        {
                                            break lab44;
                                        }
                                    }
                                }
                                break lab43;
                            }
                            cursor = v_37;
                            lab51: {
                                if (!(B_meem_found))
                                {
                                    break lab51;
                                }
                                break lab42;
                            }
                            lab52: {
                                int v_43 = cursor;
                                lab53: {
                                    if (!(B_alef_found))
                                    {
                                        break lab53;
                                    }
                                    if (!r_Pattern_Step1b())
                                    {
                                        break lab53;
                                    }
                                    break lab52;
                                }
                                cursor = v_43;
                                if (!(B_v_found))
                                {
                                    break lab42;
                                }
                                if (!r_Pattern_Step1c())
                                {
                                    break lab42;
                                }
                            }
                        }
                    }
                    cursor = v_36;
                    if (!(B_root_found))
                    {
                        break lab41;
                    }
                    {

                        SnowballProgram v_44 = new SnowballProgram(this);
                        current = S_root;
                        cursor = 0;
                        limit = current.length();
                        {
                            int c = cursor;
                            insert(cursor, limit, S_lam1);
                            cursor = c;
                        }
                        copy_from(v_44);
                    }
                    {

                        SnowballProgram v_45 = new SnowballProgram(this);
                        current = S_root;
                        cursor = 0;
                        limit = current.length();
                        insert(cursor, cursor, S_ain);
                        copy_from(v_45);
                    }
                    {

                        SnowballProgram v_46 = new SnowballProgram(this);
                        current = S_root;
                        cursor = 0;
                        limit = current.length();
                        insert(cursor, cursor, S_fa);
                        copy_from(v_46);
                    }
                    break lab40;
                }
                lab54: {
                    if (!(I_word_len == 5))
                    {
                        break lab54;
                    }
                    int v_47 = cursor;
                    r_Checks_Pattern2();
                    cursor = v_47;
                    int v_48 = cursor;
                    lab55: {
                        lab56: {
                            int v_49 = cursor;
                            lab57: {
                                if (!(B_case1))
                                {
                                    break lab57;
                                }
                                if (!(B_case2))
                                {
                                    break lab57;
                                }
                                if (!r_Pattern_Step2a())
                                {
                                    break lab57;
                                }
                                break lab56;
                            }
                            cursor = v_49;
                            lab58: {
                                if (!(B_case3))
                                {
                                    break lab58;
                                }
                                if (!(B_case4))
                                {
                                    break lab58;
                                }
                                if (!r_Pattern_Step2a1())
                                {
                                    break lab58;
                                }
                                break lab56;
                            }
                            cursor = v_49;
                            lab59: {
                                if (!(B_case5))
                                {
                                    break lab59;
                                }
                                if (!r_Pattern_Step2c2())
                                {
                                    break lab59;
                                }
                                break lab56;
                            }
                            cursor = v_49;
                            lab60: {
                                if (!(B_case6))
                                {
                                    break lab60;
                                }
                                if (!r_Pattern_Step2c4())
                                {
                                    break lab60;
                                }
                                break lab56;
                            }
                            cursor = v_49;
                            if (!(B_case7))
                            {
                                break lab55;
                            }
                            if (!r_Pattern_Step2c())
                            {
                                break lab55;
                            }
                        }
                    }
                    cursor = v_48;
                    if (!(B_root_found))
                    {
                        break lab54;
                    }
                    {

                        SnowballProgram v_50 = new SnowballProgram(this);
                        current = S_root;
                        cursor = 0;
                        limit = current.length();
                        {
                            int c = cursor;
                            insert(cursor, limit, S_lam1);
                            cursor = c;
                        }
                        copy_from(v_50);
                    }
                    {

                        SnowballProgram v_51 = new SnowballProgram(this);
                        current = S_root;
                        cursor = 0;
                        limit = current.length();
                        insert(cursor, cursor, S_ain);
                        copy_from(v_51);
                    }
                    {

                        SnowballProgram v_52 = new SnowballProgram(this);
                        current = S_root;
                        cursor = 0;
                        limit = current.length();
                        insert(cursor, cursor, S_fa);
                        copy_from(v_52);
                    }
                    break lab40;
                }
                if (!(I_word_len == 6))
                {
                    break lab39;
                }
                int v_53 = cursor;
                r_Pattern_Checks3();
                cursor = v_53;
                int v_54 = cursor;
                lab61: {
                    lab62: {
                        int v_55 = cursor;
                        lab63: {
                            if (!(B_case8))
                            {
                                break lab63;
                            }
                            if (!r_Pattern_Step3b())
                            {
                                break lab63;
                            }
                            break lab62;
                        }
                        cursor = v_55;
                        lab64: {
                            if (!(B_case9))
                            {
                                break lab64;
                            }
                            if (!r_Pattern_Step3c())
                            {
                                break lab64;
                            }
                            break lab62;
                        }
                        cursor = v_55;
                        int v_56 = cursor;
                        lab65: {
                            if (!r_Prefix_Step5_Verb())
                            {
                                break lab65;
                            }
                            if (!r_Checks_Pattern2())
                            {
                                break lab65;
                            }
                            if (!(B_case1))
                            {
                                break lab65;
                            }
                            if (!(B_case2))
                            {
                                break lab65;
                            }
                            if (!r_Pattern_Step2a())
                            {
                                break lab65;
                            }
                        }
                        cursor = v_56;
                    }
                }
                cursor = v_54;
                if (!(B_root_found))
                {
                    break lab39;
                }
                {

                    SnowballProgram v_57 = new SnowballProgram(this);
                    current = S_root;
                    cursor = 0;
                    limit = current.length();
                    {
                        int c = cursor;
                        insert(cursor, limit, S_lam1);
                        cursor = c;
                    }
                    copy_from(v_57);
                }
                {

                    SnowballProgram v_58 = new SnowballProgram(this);
                    current = S_root;
                    cursor = 0;
                    limit = current.length();
                    insert(cursor, cursor, S_ain);
                    copy_from(v_58);
                }
                {

                    SnowballProgram v_59 = new SnowballProgram(this);
                    current = S_root;
                    cursor = 0;
                    limit = current.length();
                    insert(cursor, cursor, S_fa);
                    copy_from(v_59);
                }
            }
        }
        cursor = v_30;
        copy_from(v_29);
    }
    {

        SnowballProgram v_60 = new SnowballProgram(this);
        current = S_root;
        cursor = 0;
        limit = current.length();
        r_Normalize_post();
        copy_from(v_60);
    }
    {
        int c = cursor;
        insert(cursor, limit, S_root);
        cursor = c;
    }
    return true;
}

@Override
public boolean equals( Object o ) {
    return o instanceof ArabicStemmer;
}

@Override
public int hashCode() {
    return ArabicStemmer.class.getName().hashCode();
}



}

